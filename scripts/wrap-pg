#!/usr/bin/env node
/* eslint-disable @typescript-eslint/no-var-requires */
const ora = require('ora')
const chalk = require('chalk')
const { GenericContainer } = require('testcontainers')
const { spawn } = require('child_process')

let container = null

async function main() {
    const [user, passwd, db] = ['test-user', 'test-secret', 'test-db']

    const spinner = ora(chalk.blue('  Starting postgres')).start()
    container = await new GenericContainer('postgres', '13')
        .withEnv('POSTGRES_USER', user)
        .withEnv('POSTGRES_PASSWORD', passwd)
        .withEnv('POSTGRES_DB', db)
        .withExposedPorts(5432)
        .start()

    spinner.stop()

    const host = container.getHost()
    const port = container.getMappedPort(5432)

    console.log(
        chalk.blue('  Postgres started, available at ') + chalk.blue.bold(`${host}:${port}`)
    )

    // remove first two arguments [node, path] from command arg
    const cmd = process.argv.splice(2)
    const env = {
        ...process.env,
        ...{
            PGUSER: user,
            PGHOST: host,
            PGPASSWORD: passwd,
            PGDATABASE: db,
            PGPORT: port
        }
    }

    const exitCode = await run(cmd, env)

    await stopContainer()
    process.exit(exitCode)
}

function run(command, env) {
    return new Promise(resolve => {
        const [cmd, ...args] = command
        const child = spawn(cmd, args, { env })

        child.stdout.on('data', chunk => process.stdout.write(chunk))
        child.stderr.on('data', chunk => process.stderr.write(chunk))

        child.on('close', code => {
            if (code !== 0) {
                const err = `  Child command ${command.join(' ')} exited with code ${code}`
                console.error(chalk.red(err))
            }
            resolve(code)
        })
    })
}

// As stopping container can take a while and this script
// can be interrupted at any time, we need to make sure
// we don't ask docker to stop the container while the poor whale
// is already doing its job.
let containerStopInProgress = false
async function stopContainer() {
    if (container == null || containerStopInProgress) return
    containerStopInProgress = true
    const spinner = ora(chalk.blue('  Stopping postgres')).start()
    await container.stop()
    spinner.stop()
    console.log(chalk.blue('  Postgres docker container stopped'))
}

process.on('SIGINT', async function () {
    console.log(chalk.yellow('  Caught interrupt signal'))
    await stopContainer()
    process.exit()
})

main()
